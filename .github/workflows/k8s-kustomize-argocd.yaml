name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      application:
        description: "Select application (e.g., backend, frontend, go-api, java-api, python-api)"
        required: true
        default: backend
      environment:
        description: "Select deployment environment (dev/test/prod)"
        required: true
        default: dev
      replicas:
        description: "Number of replicas for the application"
        required: false
        default: 1
      cpu_limit:
        description: "CPU limit for the application container (e.g., 500m, 1)"
        required: false
        default: "500m"
      memory_limit:
        description: "Memory limit for the application container (e.g., 256Mi, 512Mi)"
        required: false
        default: "256Mi"

jobs:
  validate-commit:
    name: Validate Commit Message
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Validate Commit Message
        run: |
          echo "$GITHUB_EVENT_HEAD_COMMIT_MESSAGE" | grep -E '^(feat|fix|docs|style|refactor|perf|test|chore): .{1,72}' || exit 1

  build-and-test:
    name: Build and Test Application
    needs: validate-commit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Docker
        uses: docker/setup-buildx-action@v2
      - name: Build Docker Image
        run: |
          docker build -t my-app:$GITHUB_SHA .
      - name: Run Tests
        run: |
          docker run --rm my-app:$GITHUB_SHA npm test
      - name: Push Image to Artifactory
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin my-artifactory
          docker tag my-app:$GITHUB_SHA my-artifactory/my-app:$GITHUB_SHA
          docker push my-artifactory/my-app:$GITHUB_SHA

  manage-manifests:
    name: Manage Kubernetes Manifests
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Feeder Repository
        uses: actions/checkout@v3
        with:
          repository: feeder-repo
          path: feeder-manifests
      - name: Generate ConfigMap for Kustomize (if patches exist)
        if: ${{ inputs.application == 'go-api' || inputs.application == 'java-api' }}
        run: |
          cat <<EOF > feeder-manifests/${{ github.event.inputs.application }}/generated-config.yaml
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: app-config
          data:
            CPU_LIMIT: "${{ github.event.inputs.cpu_limit }}"
            MEMORY_LIMIT: "${{ github.event.inputs.memory_limit }}"
            REPLICAS: "${{ github.event.inputs.replicas }}"
          EOF
      - name: Apply Kustomize Overlays
        run: |
          mkdir -p customized-manifests
          kustomize build feeder-manifests/${{ github.event.inputs.application }} > customized-manifests/deployment.yaml
      - name: Validate Manifests
        run: |
          kubeval customized-manifests/deployment.yaml
      - name: Push Manifests to Atlas
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git checkout -b update-manifests
          git add customized-manifests
          git commit -m "Update manifests for $GITHUB_SHA"
          git push origin update-manifests

  trigger-argocd:
    name: Trigger ArgoCD Deployment
    needs: manage-manifests
    runs-on: ubuntu-latest
    steps:
      - name: Sync ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
        run: |
          curl -k -X POST "$ARGOCD_SERVER/api/v1/applications/my-app/sync" \
          -H "Authorization: Bearer $ARGOCD_TOKEN"

  post-deployment:
    name: Post-Deployment Verification
    needs: trigger-argocd
    runs-on: ubuntu-latest
    steps:
      - name: Pull Deployed Image
        run: |
          docker pull my-artifactory/my-app:$GITHUB_SHA
      - name: Run Smoke Tests
        run: |
          docker run --rm my-artifactory/my-app:$GITHUB_SHA npm run smoke-test
      - name: Notify Developers
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment succeeded for $GITHUB_SHA"}' $SLACK_WEBHOOK
