name: CI/CD Pipeline with Dynamic Kustomize

on:
  workflow_dispatch:
    inputs:
      application:
        description: "Select application type"
        required: true
        type: choice
        options:
          - go-api
          - java-api
          - python-api
          - frontend
          - backend
      modifications:
        description: "Enter runtime modifications as JSON (Only for go-api & java-api)"
        required: false
        default: "{}"
      atlas_repository:
        description: "Enter your Atlas repository where manifests should be pushed"
        required: true

jobs:
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          docker build -t my-app:$GITHUB_SHA .

      - name: Login to JFrog Artifactory
        env:
          ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
          ARTIFACTORY_USER: ${{ secrets.ARTIFACTORY_USER }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: |
          echo $ARTIFACTORY_PASSWORD | docker login -u $ARTIFACTORY_USER --password-stdin $ARTIFACTORY_URL

      - name: Tag and Push Image to Artifactory
        env:
          ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
        run: |
          docker tag my-app:$GITHUB_SHA $ARTIFACTORY_URL/docker-local/my-app:$GITHUB_SHA
          docker push $ARTIFACTORY_URL/docker-local/my-app:$GITHUB_SHA


  manage-manifests:
    name: Manage Kubernetes Manifests
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Kustomize Repository
        uses: actions/checkout@v3
        with:
          repository: bgcodehub/kustomize-application
          path: kustomize-base

      - name: Install Dependencies
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          sudo apt-get install -y jq
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          curl -LO https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform-linux-amd64.tar.gz
          sudo mv kubeconform /usr/local/bin/

      - name: Validate Application Customization
        run: |
          if [[ "${{ github.event.inputs.application }}" != "go-api" && "${{ github.event.inputs.application }}" != "java-api" && "${{ github.event.inputs.modifications }}" != "{}" ]]; then
            echo "‚ùå Error: Runtime customization is only allowed for go-api and java-api"
            exit 1
          fi

      - name: Apply Runtime Modifications
        if: ${{ github.event.inputs.application == 'go-api' || github.event.inputs.application == 'java-api' }}
        run: |
          FILE=""
      
          # Determine which file to modify based on the application type
          if [[ "${{ github.event.inputs.application }}" == "go-api" ]]; then
            FILE="kustomize-base/go-api/overlays/patches/deploy.yaml"
          elif [[ "${{ github.event.inputs.application }}" == "java-api" ]]; then
            FILE="kustomize-base/java-api/overlays/patches/deploy.yaml"
          fi
      
          echo "üîπ Applying runtime modifications to $FILE"
          
          # Read and process JSON modifications
          echo '${{ github.event.inputs.modifications }}' | jq -r 'to_entries | .[] | "\(.key) = \(.value)"' | while read -r line; do
            KEY=$(echo "$line" | cut -d'=' -f1 | xargs)
            VALUE=$(echo "$line" | cut -d'=' -f2 | xargs)
            echo "  - $KEY: $VALUE"
      
            if [[ "$KEY" == "timeout_seconds" || "$KEY" == "initial_delay_seconds" || "$KEY" == "revision_history_limit" || "$KEY" == "termination_grace_period_seconds" || "$KEY" == "max_replicas" ]]; then
              VALUE=$(echo "$VALUE" | jq 'tonumber')  # Convert string to number
            fi
      
            case "$KEY" in
              cpu_limit)
                yq -i '.spec.template.spec.containers[0].resources.limits.cpu = "'"$VALUE"'"' $FILE ;;
              memory_limit)
                yq -i '.spec.template.spec.containers[0].resources.limits.memory = "'"$VALUE"'"' $FILE ;;
              cpu_request)
                yq -i '.spec.template.spec.containers[0].resources.requests.cpu = "'"$VALUE"'"' $FILE ;;
              memory_request)
                yq -i '.spec.template.spec.containers[0].resources.requests.memory = "'"$VALUE"'"' $FILE ;;
              timeout_seconds)
                yq -i '.spec.template.spec.containers[0].livenessProbe.timeoutSeconds = '$VALUE'' $FILE ;;
              initial_delay_seconds)
                yq -i '.spec.template.spec.containers[0].livenessProbe.initialDelaySeconds = '$VALUE'' $FILE ;;
              revision_history_limit)
                yq -i '.spec.revisionHistoryLimit = '$VALUE'' $FILE ;;
              termination_grace_period_seconds)
                yq -i '.spec.template.spec.terminationGracePeriodSeconds = '$VALUE'' $FILE ;;
              max_replicas)
                yq -i '.spec.maxReplicas = '$VALUE'' "kustomize-base/java-api/overlays/patches/hpa.yaml" ;;
              *)
                echo "‚ùå Error: Invalid key '$KEY'. Skipping."
                continue ;;
            esac
          done
      
          echo "‚úÖ Updates completed successfully!"

      - name: Apply Kustomize Overlays and Output New Configuration
        run: |
          mkdir -p customized-manifests
          kustomize build kustomize-base/${{ github.event.inputs.application }}/overlays/ > customized-manifests/deployment.yaml
          echo "üìù New Updated Configuration:"
          cat customized-manifests/deployment.yaml

      - name: Validate Kubernetes Manifests with Kubeconform
        run: |
          kubeconform -strict -summary -ignore-missing-schemas -schema-location default customized-manifests/deployment.yaml

      - name: Push Manifests to Atlas Repository
        env:
          GITHUB_TOKEN: ${{ secrets.ATLAS_GITHUB_PAT}}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Extract repository URL from input and inject GITHUB_TOKEN for authentication
          REPO_URL=${{ github.event.inputs.atlas_repository }}
          AUTH_REPO_URL="https://x-access-token:${GITHUB_TOKEN}@${REPO_URL#https://}"

          # Clone using authenticated URL
          git clone $AUTH_REPO_URL atlas
          
          # Copy updated Kubernetes manifests into the repo
          cp customized-manifests/deployment.yaml atlas/

          # Navigate to the Atlas repo
          cd atlas

          # Add, commit, and push changes
          git add deployment.yaml
          git commit -m "Update manifests for ${{ github.event.inputs.application }} - $GITHUB_SHA"
          git push origin main

  # trigger-argocd:
  #   name: Trigger ArgoCD Deployment
  #   needs: manage-manifests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Sync ArgoCD
  #       env:
  #         ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
  #         ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
  #       run: |
  #         curl -k -X POST "$ARGOCD_SERVER/api/v1/applications/my-app/sync" \
  #         -H "Authorization: Bearer $ARGOCD_TOKEN"

  # post-deployment:
  #   name: Post-Deployment Verification
  #   needs: trigger-argocd
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Notify Developers
  #       env:
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  #       run: |
  #         curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment succeeded for $GITHUB_SHA"}' $SLACK_WEBHOOK